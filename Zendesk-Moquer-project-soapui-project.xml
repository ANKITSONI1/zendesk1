<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="2208ef48-f30c-46e3-82b8-4190b88866c9" activeEnvironment="Default" name="Moquer-soapui-project" resourceRoot="" soapui-version="5.5.0" xmlns:con="http://eviware.com/soapui/config">
  <con:settings/>
  <con:interface xsi:type="con:RestService" id="5e20a644-6128-4316-8e40-d3c2ff047d46" wadlVersion="http://wadl.dev.java.net/2009/02" name="defaultTitle" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <con:description>defaultDescription</con:description>
    <con:settings>
      <con:setting id="CreateWadlDocumentationAction@report-directory">/Users/ankit.soni/wsdl</con:setting>
    </con:settings>
    <con:definitionCache type="TEXT" rootPart=""/>
    <con:endpoints>
      <con:endpoint>http://localhost:8089/</con:endpoint>
    </con:endpoints>
    <con:resource name="/api/v2/oauth/tokens.json" path="/api/v2/oauth/tokens.json" id="d6cf95c0-a041-4c8b-b0a2-28472855d537">
      <con:settings/>
      <con:parameters>
        <con:parameter>
          <con:name>id</con:name>
          <con:value/>
          <con:style>QUERY</con:style>
          <con:default/>
          <con:description xsi:nil="true"/>
        </con:parameter>
      </con:parameters>
      <con:method name="GET" id="79d60a5e-907d-46e3-90e3-b6a661e7a50e" method="GET">
        <con:description></con:description>
        <con:settings/>
        <con:parameters/>
        <con:representation type="RESPONSE">
          <con:mediaType>application/json</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>application/xml</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>text/html; charset=iso-8859-1</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element>html</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType xsi:nil="true"/>
          <con:status>404</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="REQUEST">
          <con:mediaType>application/json</con:mediaType>
          <con:params/>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType xsi:nil="true"/>
          <con:status>404</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:request name="Request 1" id="c7a8705a-c51d-4f9a-9a8b-b2bf4483cb2e" mediaType="application/json" postQueryString="false">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
          </con:settings>
          <con:endpoint>http://localhost:8089/</con:endpoint>
          <con:request/>
          <con:originalUri>http://PUASONI.local/api/v2/oauth/tokens.json</con:originalUri>
          <con:credentials>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters>
            <entry key="id" value="361981323973" xmlns="http://eviware.com/soapui/config"/>
          </con:parameters>
          <con:parameterOrder>
            <con:entry>id</con:entry>
          </con:parameterOrder>
        </con:request>
      </con:method>
    </con:resource>
    <con:resource name="/api/v2/oauth/tokens/current.json" path="/api/v2/oauth/tokens/current.json" id="881e2d61-a541-4645-90d6-10aef76e25d2">
      <con:settings/>
      <con:parameters/>
      <con:method name="GET" id="c6ff8c5e-9adc-444d-ac2f-ffb566f16332" method="GET">
        <con:description></con:description>
        <con:settings/>
        <con:parameters/>
        <con:representation type="RESPONSE">
          <con:mediaType>application/json</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>application/xml</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
        </con:representation>
        <con:request name="Request 1" id="0135bb8d-cdf9-4640-a685-33390b1d5942" mediaType="application/json" postQueryString="false">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
          </con:settings>
          <con:endpoint>http://localhost:8089/</con:endpoint>
          <con:request/>
          <con:originalUri>http://PUASONI.local/api/v2/oauth/tokens/current.json</con:originalUri>
          <con:credentials>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:request>
      </con:method>
    </con:resource>
    <con:resource name="/api/v2/organizations.json" path="/api/v2/organizations.json" id="c07d02f1-3436-4903-a3dd-1827b013edcc">
      <con:settings/>
      <con:parameters/>
      <con:method name="GET" id="96108d56-9196-40f5-8102-8dca5bfcb246" method="GET">
        <con:description></con:description>
        <con:settings/>
        <con:parameters/>
        <con:representation type="RESPONSE">
          <con:mediaType>application/json</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>application/json</con:mediaType>
          <con:status>401</con:status>
          <con:params/>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>application/xml</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
        </con:representation>
        <con:request name="Request 1" id="e59a78a5-658b-4511-8989-e95731201f5c" mediaType="application/json">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
          </con:settings>
          <con:endpoint>http://localhost:8089/</con:endpoint>
          <con:request/>
          <con:originalUri>http://PUASONI.local/api/v2/organizations.json</con:originalUri>
          <con:credentials>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:request>
      </con:method>
    </con:resource>
    <con:resource name="/api/v2/organizations/{user_id}.json" path="/api/v2/organizations/{user_id}.json" id="30e2f883-110b-4837-a470-68d572d3633b">
      <con:settings/>
      <con:parameters/>
      <con:method name="GET" id="fd2088f1-f28f-4d89-94d5-a38b657dc2e2" method="GET">
        <con:description></con:description>
        <con:settings/>
        <con:parameters>
          <con:parameter required="true">
            <con:name>user_id</con:name>
            <con:style>TEMPLATE</con:style>
            <con:description>The external account number (int) or account ID Guid.</con:description>
          </con:parameter>
        </con:parameters>
        <con:representation type="RESPONSE">
          <con:mediaType>application/json</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>application/json</con:mediaType>
          <con:status>401</con:status>
          <con:params/>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType xsi:nil="true"/>
          <con:status>404</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType xsi:nil="true"/>
          <con:status>404</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType xsi:nil="true"/>
          <con:status>404</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType xsi:nil="true"/>
          <con:status>404</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType xsi:nil="true"/>
          <con:status>404</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType xsi:nil="true"/>
          <con:status>404</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType xsi:nil="true"/>
          <con:status>404</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType xsi:nil="true"/>
          <con:status>404</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType xsi:nil="true"/>
          <con:status>404</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType xsi:nil="true"/>
          <con:status>404</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType xsi:nil="true"/>
          <con:status>404</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType xsi:nil="true"/>
          <con:status>404</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType xsi:nil="true"/>
          <con:status>404</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType xsi:nil="true"/>
          <con:status>404</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType xsi:nil="true"/>
          <con:status>404</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType xsi:nil="true"/>
          <con:status>404</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType xsi:nil="true"/>
          <con:status>404</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType xsi:nil="true"/>
          <con:status>404</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType xsi:nil="true"/>
          <con:status>404</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType xsi:nil="true"/>
          <con:status>404</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType xsi:nil="true"/>
          <con:status>404</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType xsi:nil="true"/>
          <con:status>404</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType xsi:nil="true"/>
          <con:status>404</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType xsi:nil="true"/>
          <con:status>404</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType xsi:nil="true"/>
          <con:status>404</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType xsi:nil="true"/>
          <con:status>404</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType xsi:nil="true"/>
          <con:status>404</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType xsi:nil="true"/>
          <con:status>404</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType xsi:nil="true"/>
          <con:status>404</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType xsi:nil="true"/>
          <con:status>404</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType xsi:nil="true"/>
          <con:status>404</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType xsi:nil="true"/>
          <con:status>404</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType xsi:nil="true"/>
          <con:status>404</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType xsi:nil="true"/>
          <con:status>404</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>text/html; charset=iso-8859-1</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element>html</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType xsi:nil="true"/>
          <con:status>404</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType xsi:nil="true"/>
          <con:status>404</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType xsi:nil="true"/>
          <con:status>404</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType xsi:nil="true"/>
          <con:status>404</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType xsi:nil="true"/>
          <con:status>404</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType xsi:nil="true"/>
          <con:status>404</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType xsi:nil="true"/>
          <con:status>404</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType xsi:nil="true"/>
          <con:status>404</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType xsi:nil="true"/>
          <con:status>404</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:request name="Request 1" id="37e95c1f-5bbd-496c-82e8-6574583c846a" mediaType="application/json">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
          </con:settings>
          <con:endpoint>http://localhost:8089/</con:endpoint>
          <con:request/>
          <con:originalUri>http://PUASONI.local/api/v2/organizations/364640944433.json</con:originalUri>
          <con:credentials>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters>
            <entry key="user_id" value="364640944433" xmlns="http://eviware.com/soapui/config"/>
          </con:parameters>
        </con:request>
      </con:method>
    </con:resource>
    <con:resource name="/api/v2/satisfaction_ratings.json" path="/api/v2/satisfaction_ratings.json" id="6d4f2475-1a31-47e6-bbd9-04470650871b">
      <con:settings/>
      <con:parameters/>
      <con:method name="GET" id="294bdd16-6d4f-4ae8-a989-e91d63adee1e" method="GET">
        <con:description></con:description>
        <con:settings/>
        <con:parameters/>
        <con:representation type="RESPONSE">
          <con:mediaType>application/json</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>application/json</con:mediaType>
          <con:status>401</con:status>
          <con:params/>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>application/xml</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
        </con:representation>
        <con:request name="Request 1" id="b79b9ea7-e01c-4c81-a5b1-56e600ab5dde" mediaType="application/json">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
          </con:settings>
          <con:endpoint>http://localhost:8089</con:endpoint>
          <con:request/>
          <con:originalUri>http://localhost/api/v2/satisfaction_ratings.json</con:originalUri>
          <con:credentials>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:request>
      </con:method>
    </con:resource>
    <con:resource name="/api/v2/satisfaction_ratings/{id}.json" path="/api/v2/satisfaction_ratings/{id}.json" id="08bb19b0-5d0c-4d42-bd51-9844b38e2e10">
      <con:settings/>
      <con:parameters/>
      <con:method name="GET" id="67f6b782-b1d4-4cc1-8c29-3c75b7b0f0d4" method="GET">
        <con:description></con:description>
        <con:settings/>
        <con:parameters>
          <con:parameter required="true">
            <con:name>id</con:name>
            <con:style>TEMPLATE</con:style>
            <con:description>The external account number (int) or account ID Guid.</con:description>
          </con:parameter>
        </con:parameters>
        <con:representation type="RESPONSE">
          <con:mediaType>application/json</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>application/json</con:mediaType>
          <con:status>401</con:status>
          <con:params/>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>application/xml</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType xsi:nil="true"/>
          <con:status>404</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType xsi:nil="true"/>
          <con:status>404</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType xsi:nil="true"/>
          <con:status>404</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType xsi:nil="true"/>
          <con:status>404</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType xsi:nil="true"/>
          <con:status>404</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType xsi:nil="true"/>
          <con:status>404</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType xsi:nil="true"/>
          <con:status>404</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType xsi:nil="true"/>
          <con:status>404</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType xsi:nil="true"/>
          <con:status>404</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType xsi:nil="true"/>
          <con:status>404</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType xsi:nil="true"/>
          <con:status>404</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType xsi:nil="true"/>
          <con:status>404</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType xsi:nil="true"/>
          <con:status>404</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType xsi:nil="true"/>
          <con:status>404</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType xsi:nil="true"/>
          <con:status>404</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>0</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>0</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>0</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType xsi:nil="true"/>
          <con:status>404</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType xsi:nil="true"/>
          <con:status>404</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:request name="Request 1" id="985386e6-2368-40a9-9002-7e01c2e4b4ac" mediaType="application/json">
          <con:settings/>
          <con:parameters/>
        </con:request>
      </con:method>
    </con:resource>
    <con:resource name="/api/v2/tickets.json" path="/api/v2/tickets.json" id="ddbc5a44-c6c2-4460-86c6-e9bc41654027">
      <con:settings/>
      <con:parameters/>
      <con:method name="GET" id="53845b07-8261-4b16-9526-691f8249f4ba" method="GET">
        <con:description></con:description>
        <con:settings/>
        <con:parameters/>
        <con:representation type="RESPONSE">
          <con:mediaType>application/json</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>application/json</con:mediaType>
          <con:status>401</con:status>
          <con:params/>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>application/xml</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
        </con:representation>
        <con:request name="Request 1" id="e5bcca44-210f-49a1-8007-67eb78aa0c99" mediaType="application/json">
          <con:settings/>
          <con:parameters/>
        </con:request>
      </con:method>
    </con:resource>
    <con:resource name="/api/v2/tickets/{id}.json" path="/api/v2/tickets/{id}.json" id="6631462d-fd78-4314-9c6e-dca2c815653d">
      <con:settings/>
      <con:parameters/>
      <con:method name="GET" id="2c10fa79-6e6e-4204-9930-99d364178c8a" method="GET">
        <con:description></con:description>
        <con:settings/>
        <con:parameters>
          <con:parameter required="true">
            <con:name>id</con:name>
            <con:style>TEMPLATE</con:style>
            <con:description>The external account number (int) or account ID Guid.</con:description>
          </con:parameter>
        </con:parameters>
        <con:representation type="RESPONSE">
          <con:mediaType>application/json</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>application/json</con:mediaType>
          <con:status>401</con:status>
          <con:params/>
        </con:representation>
        <con:request name="Request 1" id="c4aa20d1-d492-4e83-a424-6facb42c9cb4" mediaType="application/json">
          <con:settings/>
          <con:parameters/>
        </con:request>
      </con:method>
    </con:resource>
    <con:inferredSchema><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<xml-fragment><inf:schema xmlns:inf="http://www.eviware.com/soapui/InferredSchema"><inf:namespace>http://PUASONI.local</inf:namespace><inf:particle xsi:type="inf:ElementParticle" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:name>data</inf:name><inf:type xsi:type="inf:TypeReference"><inf:reference xmlns:puas="http://PUASONI.local">puas:_data</inf:reference></inf:type></inf:particle><inf:prefix key="http://www.w3.org/2001/XMLSchema" value="xs"/><inf:complexType><inf:completed>true</inf:completed><inf:mixed>false</inf:mixed><inf:name>_data</inf:name><inf:attribute xsi:type="inf:AttributeParticle" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:name>contentLength</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>boolean</inf:typeName></inf:type></inf:attribute><inf:attribute xsi:type="inf:AttributeParticle" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:name>contentType</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>string</inf:typeName></inf:type></inf:attribute><inf:content xsi:type="inf:EmptyContent" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:completed>true</inf:completed></inf:content></inf:complexType></inf:schema><inf:schema xmlns:inf="http://www.eviware.com/soapui/InferredSchema"><inf:namespace>http://localhost</inf:namespace><inf:particle xsi:type="inf:ElementParticle" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:name>data</inf:name><inf:type xsi:type="inf:TypeReference"><inf:reference xmlns:loc="http://localhost">loc:_data</inf:reference></inf:type></inf:particle><inf:particle xsi:type="inf:ElementParticle" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:name>html</inf:name><inf:type xsi:type="inf:TypeReference"><inf:reference xmlns:loc="http://localhost">loc:_html</inf:reference></inf:type></inf:particle><inf:prefix key="http://www.w3.org/2001/XMLSchema" value="xs"/><inf:complexType><inf:completed>true</inf:completed><inf:mixed>false</inf:mixed><inf:name>_data</inf:name><inf:attribute xsi:type="inf:AttributeParticle" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:name>contentLength</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>boolean</inf:typeName></inf:type></inf:attribute><inf:attribute xsi:type="inf:AttributeParticle" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:name>contentType</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>string</inf:typeName></inf:type></inf:attribute><inf:content xsi:type="inf:EmptyContent" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:completed>true</inf:completed></inf:content></inf:complexType><inf:complexType><inf:completed>true</inf:completed><inf:mixed>false</inf:mixed><inf:name>_html</inf:name><inf:content xsi:type="inf:SequenceContent" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:completed>true</inf:completed><inf:particle xsi:type="inf:ElementParticle"><inf:name>head</inf:name><inf:type xsi:type="inf:TypeReference"><inf:reference xmlns:loc="http://localhost">loc:html_head</inf:reference></inf:type></inf:particle><inf:particle xsi:type="inf:ElementParticle"><inf:name>body</inf:name><inf:type xsi:type="inf:TypeReference"><inf:reference xmlns:loc="http://localhost">loc:html_body</inf:reference></inf:type></inf:particle><inf:comesBefore qname="loc:body" xmlns:loc="http://localhost"/><inf:comesBefore qname="loc:head" xmlns:loc="http://localhost"><inf:other>loc:body</inf:other></inf:comesBefore></inf:content></inf:complexType><inf:complexType><inf:completed>true</inf:completed><inf:mixed>false</inf:mixed><inf:name>head_meta</inf:name><inf:attribute xsi:type="inf:AttributeParticle" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:name>name</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>string</inf:typeName></inf:type></inf:attribute><inf:attribute xsi:type="inf:AttributeParticle" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:name>content</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>string</inf:typeName></inf:type></inf:attribute><inf:content xsi:type="inf:EmptyContent" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:completed>true</inf:completed></inf:content></inf:complexType><inf:complexType><inf:completed>true</inf:completed><inf:mixed>false</inf:mixed><inf:name>html_body</inf:name><inf:content xsi:type="inf:SequenceContent" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:completed>true</inf:completed><inf:particle xsi:type="inf:ElementParticle"><inf:name>p</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>string</inf:typeName></inf:type></inf:particle><inf:particle xsi:type="inf:ElementParticle"><inf:name>br</inf:name><inf:attribute key="maxOccurs" value="2"/><inf:type xsi:type="inf:EmptyType"><inf:completed>true</inf:completed></inf:type></inf:particle><inf:comesBefore qname="loc:p" xmlns:loc="http://localhost"><inf:other>loc:br</inf:other></inf:comesBefore><inf:comesBefore qname="loc:br" xmlns:loc="http://localhost"/></inf:content></inf:complexType><inf:complexType><inf:completed>true</inf:completed><inf:mixed>false</inf:mixed><inf:name>html_head</inf:name><inf:content xsi:type="inf:SequenceContent" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:completed>true</inf:completed><inf:particle xsi:type="inf:ElementParticle"><inf:name>meta</inf:name><inf:type xsi:type="inf:TypeReference"><inf:reference xmlns:loc="http://localhost">loc:head_meta</inf:reference></inf:type></inf:particle><inf:particle xsi:type="inf:ElementParticle"><inf:name>title</inf:name><inf:type xsi:type="inf:EmptyType"><inf:completed>true</inf:completed></inf:type></inf:particle><inf:comesBefore qname="loc:title" xmlns:loc="http://localhost"/><inf:comesBefore qname="loc:meta" xmlns:loc="http://localhost"><inf:other>loc:title</inf:other></inf:comesBefore></inf:content></inf:complexType></inf:schema></xml-fragment>]]></con:inferredSchema>
  </con:interface>
  <con:testSuite id="6c4d2ed4-09da-4465-9415-f952ba617a76" name="defaultTitle TestSuite">
    <con:description>TestSuite generated for REST Service [defaultTitle]</con:description>
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>
    <con:testCase id="29521929-4b6e-414d-afa2-cbf53f9cb92e" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="/api/v2/oauth/tokens.json TestCase" searchProperties="true">
      <con:description>TestCase generated for REST Resource [/api/v2/oauth/tokens.json] located at [/api/v2/oauth/tokens.json]</con:description>
      <con:settings/>
      <con:testStep type="restrequest" name="Request 1" id="58330ca2-66f4-4f74-bc7c-c5cc6be37320">
        <con:settings/>
        <con:config service="defaultTitle" resourcePath="/api/v2/oauth/tokens.json" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Request 1" id="c7a8705a-c51d-4f9a-9a8b-b2bf4483cb2e" mediaType="application/json">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>http://localhost:8089/</con:endpoint>
            <con:request/>
            <con:originalUri>http://PUASONI.local/api/v2/oauth/tokens.json</con:originalUri>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <entry key="id" value="" xmlns="http://eviware.com/soapui/config"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>id</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:testCase id="d6e400c5-130e-4f1e-9041-50cdbfd77b7f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="/api/v2/oauth/tokens/current.json TestCase" searchProperties="true">
      <con:description>TestCase generated for REST Resource [/api/v2/oauth/tokens/current.json] located at [/api/v2/oauth/tokens/current.json]</con:description>
      <con:settings/>
      <con:testStep type="restrequest" name="Request 1" id="e2572912-46b4-4211-ad18-1b80d0e16826">
        <con:settings/>
        <con:config service="defaultTitle" resourcePath="/api/v2/oauth/tokens/current.json" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Request 1" id="0135bb8d-cdf9-4640-a685-33390b1d5942" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>http://PUASONI.local:8089/</con:endpoint>
            <con:request/>
            <con:originalUri>http://PUASONI.local/api/v2/oauth/tokens/current.json</con:originalUri>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="GET - Request 1" id="c98a494d-b115-49c8-9d81-86b0f13fc882">
        <con:settings/>
        <con:config service="defaultTitle" resourcePath="/api/v2/oauth/tokens/current.json" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="GET - Request 1" id="0135bb8d-cdf9-4640-a685-33390b1d5942" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>http://localhost:8089/</con:endpoint>
            <con:request/>
            <con:originalUri>http://PUASONI.local/api/v2/oauth/tokens/current.json</con:originalUri>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:testCase id="6ca3eb07-9041-4d40-8dbc-ac60a9438c3d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="/api/v2/organizations.json TestCase" searchProperties="true">
      <con:description>TestCase generated for REST Resource [/api/v2/organizations.json] located at [/api/v2/organizations.json]</con:description>
      <con:settings/>
      <con:testStep type="restrequest" name="Request 1" id="7bbc426e-2171-417e-9fed-bd61ad50dea9">
        <con:settings/>
        <con:config service="defaultTitle" resourcePath="/api/v2/organizations.json" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Request 1" id="e59a78a5-658b-4511-8989-e95731201f5c" mediaType="application/json">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>http://PUASONI.local:8089/</con:endpoint>
            <con:request/>
            <con:originalUri>http://PUASONI.local/api/v2/organizations.json</con:originalUri>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:testCase id="bed7527d-a41a-459d-8cf2-0ddd24593f6e" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="/api/v2/organizations/{user_id}.json TestCase" searchProperties="true">
      <con:description>TestCase generated for REST Resource [/api/v2/organizations/{user_id}.json] located at [/api/v2/organizations/{user_id}.json]</con:description>
      <con:settings/>
      <con:testStep type="restrequest" name="Request 1" id="450ac899-ca88-429e-8f1b-2433d1412ad6">
        <con:settings/>
        <con:config service="defaultTitle" resourcePath="/api/v2/organizations/{user_id}.json" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Request 1" id="37e95c1f-5bbd-496c-82e8-6574583c846a" mediaType="application/json">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="AutoInferSchemas">true</con:setting>
            </con:settings>
            <con:endpoint>http://PUASONI.local:8089/</con:endpoint>
            <con:request/>
            <con:originalUri>http://PUASONI.local/api/v2/organizations/364640944433.json</con:originalUri>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <entry key="user_id" value="364640944433" xmlns="http://eviware.com/soapui/config"/>
            </con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:testCase id="85c87415-da09-4887-886f-d4cffbb3bd48" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="/api/v2/satisfaction_ratings.json TestCase" searchProperties="true">
      <con:description>TestCase generated for REST Resource [/api/v2/satisfaction_ratings.json] located at [/api/v2/satisfaction_ratings.json]</con:description>
      <con:settings/>
      <con:testStep type="restrequest" name="Request 1" id="b285b57d-a360-447c-bbce-eb97d4dca876">
        <con:settings/>
        <con:config service="defaultTitle" resourcePath="/api/v2/satisfaction_ratings.json" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Request 1" id="b79b9ea7-e01c-4c81-a5b1-56e600ab5dde" mediaType="application/json">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>http://localhost:8089/</con:endpoint>
            <con:request/>
            <con:originalUri>http://PUASONI.local/api/v2/satisfaction_ratings.json</con:originalUri>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:testCase id="a34cbed4-63e0-4b6f-9e0c-49d8ee78920f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="/api/v2/satisfaction_ratings/{id}.json TestCase" searchProperties="true">
      <con:description>TestCase generated for REST Resource [/api/v2/satisfaction_ratings/{id}.json] located at [/api/v2/satisfaction_ratings/{id}.json]</con:description>
      <con:settings/>
      <con:testStep type="restrequest" name="Request 1" id="cfced59e-dced-4737-9f52-26551a76ed24">
        <con:settings/>
        <con:config service="defaultTitle" resourcePath="/api/v2/satisfaction_ratings/{id}.json" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Request 1" id="985386e6-2368-40a9-9002-7e01c2e4b4ac" mediaType="application/json">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>http://localhost:8089/</con:endpoint>
            <con:request/>
            <con:originalUri>http://localhost/api/v2/satisfaction_ratings/.json</con:originalUri>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <entry key="id" value="362171125454" xmlns="http://eviware.com/soapui/config"/>
            </con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:testCase id="7b81ed3c-7813-4461-8736-baa8dcb6fae8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="/api/v2/tickets.json TestCase" searchProperties="true">
      <con:description>TestCase generated for REST Resource [/api/v2/tickets.json] located at [/api/v2/tickets.json]</con:description>
      <con:settings/>
      <con:testStep type="restrequest" name="Request 1" id="27aacccb-6d17-4382-b3be-cf444f446144">
        <con:settings/>
        <con:config service="defaultTitle" resourcePath="/api/v2/tickets.json" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Request 1" id="e5bcca44-210f-49a1-8007-67eb78aa0c99" mediaType="application/json">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>http://localhost:8089/</con:endpoint>
            <con:request/>
            <con:originalUri>http://localhost/api/v2/tickets.json</con:originalUri>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:testCase id="e89d6737-ff57-45b1-bb8a-3e9b24536f76" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="/api/v2/tickets/{id}.json TestCase" searchProperties="true">
      <con:description>TestCase generated for REST Resource [/api/v2/tickets/{id}.json] located at [/api/v2/tickets/{id}.json]</con:description>
      <con:settings/>
      <con:testStep type="restrequest" name="Request 1" id="39fb8804-4c3e-4b2f-9464-c2fae334a50c">
        <con:settings/>
        <con:config service="defaultTitle" resourcePath="/api/v2/tickets/{id}.json" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Request 1" id="c4aa20d1-d492-4e83-a424-6facb42c9cb4" mediaType="application/json">
            <con:settings/>
            <con:request/>
            <con:parameters/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:properties/>
  </con:testSuite>
  <con:restMockService id="4fbc03cb-3c60-46e2-8871-8da2dae41a86" port="8080" path="/" host="PUASONI.local" name="REST MockService 1">
    <con:settings/>
    <con:properties/>
  </con:restMockService>
  <con:restMockService id="7ebfb02a-0982-4c6c-9643-1c532fbbd2d9" port="8089" path="/" host="localhost" name="REST MockService 2" docroot="">
    <con:settings/>
    <con:properties/>
    <con:restMockAction name="/api/v2/oauth/tokens.json" method="GET" resourcePath="/api/v2/oauth/tokens.json" id="0abd879c-a14e-45ce-beae-3c7c8ec59286">
      <con:settings/>
      <con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
      <con:dispatchStyle>SEQUENCE</con:dispatchStyle>
      <con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/</con:dispatchPath>
      <con:response name="Response 1" id="2036fbc4-544c-417c-90b9-46b2c6e2031d" httpResponseStatus="200" mediaType="application/json">
        <con:settings/>
        <con:responseContent>{
    "tokens": [
        {
            "url": "https://appdirect1help.zendesk.com/api/v2/oauth/tokens/361975583433.json",
            "id": 361975583433,
            "user_id": 378488750673,
            "client_id": 360000056333,
            "token": "6f0ddbfa88",
            "refresh_token": null,
            "created_at": "2019-04-23T09:25:28Z",
            "expires_at": null,
            "used_at": "2019-04-24T09:09:52Z",
            "scopes": []
        },
        {
            "url": "https://appdirect1help.zendesk.com/api/v2/oauth/tokens/361981323973.json",
            "id": 361981323973,
            "user_id": 378488750673,
            "client_id": 360000056333,
            "token": "951f8f5c61",
            "refresh_token": null,
            "created_at": "2019-04-24T06:38:15Z",
            "expires_at": null,
            "used_at": "2019-04-29T05:02:42Z",
            "scopes": [
                "read"
            ]
        },
        {
            "url": "https://appdirect1help.zendesk.com/api/v2/oauth/tokens/361983565434.json",
            "id": 361983565434,
            "user_id": 378488750673,
            "client_id": 360000056333,
            "token": "a07566a539",
            "refresh_token": null,
            "created_at": "2019-04-24T06:39:20Z",
            "expires_at": null,
            "used_at": "2019-04-24T09:10:23Z",
            "scopes": [
                "write"
            ]
        }
    ],
    "next_page": null,
    "previous_page": null,
    "count": 3
}</con:responseContent>
      </con:response>
    </con:restMockAction>
    <con:restMockAction name="/api/v2/oauth/tokens/current.json" method="GET" resourcePath="/api/v2/oauth/tokens/current.json" id="615ea25c-312d-48d5-ab09-fb2670054dc2">
      <con:settings/>
      <con:dispatchStyle>SEQUENCE</con:dispatchStyle>
      <con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/</con:dispatchPath>
      <con:response name="Response 1" id="1a1ccbf9-4305-4565-98ae-b96d37ede2e4" httpResponseStatus="200" mediaType="application/json">
        <con:settings/>
        <con:responseContent>{
    "token": {
        "url": "https://appdirect1help.zendesk.com/api/v2/oauth/tokens/361981323973.json",
        "id": 361981323973,
        "user_id": 378488750673,
        "client_id": 360000056333,
        "token": "951f8f5c61",
        "refresh_token": null,
        "created_at": "2019-04-24T06:38:15Z",
        "expires_at": null,
        "used_at": "2019-04-30T06:31:02Z",
        "scopes": [
            "read"
        ]
    }
}</con:responseContent>
      </con:response>
    </con:restMockAction>
    <con:restMockAction name="/api/v2/organizations.json" method="GET" resourcePath="/api/v2/organizations.json" id="289fc278-a26a-4aba-aa7c-52c5bb5e31ae">
      <con:settings/>
      <con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
      <con:dispatchStyle>SEQUENCE</con:dispatchStyle>
      <con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/</con:dispatchPath>
      <con:response name="Response 1" id="e38d3383-11c9-43e7-a0d4-644cc468baf2" httpResponseStatus="200" mediaType="application/json">
        <con:settings/>
        <con:responseContent>{
    "organizations": [
        {
            "url": "https://appdirect1help.zendesk.com/api/v2/organizations/364640944433.json",
            "id": 364640944433,
            "name": "AppDirect",
            "shared_tickets": false,
            "shared_comments": false,
            "external_id": null,
            "created_at": "2019-04-23T06:18:27Z",
            "updated_at": "2019-04-24T06:08:18Z",
            "domain_names": [],
            "details": "",
            "notes": "",
            "group_id": 360003899233,
            "tags": [],
            "organization_fields": {}
        },
        {
            "url": "https://appdirect1help.zendesk.com/api/v2/organizations/364745425773.json",
            "id": 364745425773,
            "name": "Example",
            "shared_tickets": false,
            "shared_comments": false,
            "external_id": null,
            "created_at": "2019-04-24T08:18:40Z",
            "updated_at": "2019-04-24T08:18:40Z",
            "domain_names": [
                "example.com"
            ],
            "details": "",
            "notes": "",
            "group_id": null,
            "tags": [],
            "organization_fields": {}
        }
    ],
    "next_page": null,
    "previous_page": null,
    "count": 2
}</con:responseContent>
      </con:response>
    </con:restMockAction>
    <con:restMockAction name="/api/v2/organizations/.json" method="GET" resourcePath="/api/v2/organizations/.json" id="46be0867-b50b-47ac-bc65-a881875c423f">
      <con:settings/>
      <con:dispatchStyle>SEQUENCE</con:dispatchStyle>
      <con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/</con:dispatchPath>
      <con:response name="Response 1" id="1242a0d9-4915-4ef7-9745-5a65e701bfe7" httpResponseStatus="200" mediaType="application/json">
        <con:settings/>
        <con:responseContent>{
    "organization": {
        "url": "https://appdirect1help.zendesk.com/api/v2/organizations/364640944433.json",
        "id": 364640944433,
        "name": "AppDirect",
        "shared_tickets": false,
        "shared_comments": false,
        "external_id": null,
        "created_at": "2019-04-23T06:18:27Z",
        "updated_at": "2019-04-24T06:08:18Z",
        "domain_names": [],
        "details": "",
        "notes": "",
        "group_id": 360003899233,
        "tags": [],
        "organization_fields": {}
    }
}</con:responseContent>
      </con:response>
    </con:restMockAction>
    <con:restMockAction name="/api/v2/satisfaction_ratings.json" method="GET" resourcePath="/api/v2/satisfaction_ratings.json" id="e2c93282-35cd-4324-a346-de8ca171688c">
      <con:settings/>
      <con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
      <con:dispatchStyle>SEQUENCE</con:dispatchStyle>
      <con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/</con:dispatchPath>
      <con:response name="Response 1" id="1c185786-7557-4659-8463-13044837d633" httpResponseStatus="200" mediaType="application/json">
        <con:settings/>
        <con:responseContent>{
    "satisfaction_ratings": [
        {
            "url": "https://appdirect1help.zendesk.com/api/v2/satisfaction_ratings/362171125454.json",
            "id": 362171125454,
            "assignee_id": 378488750673,
            "group_id": 360003899233,
            "requester_id": 378599917954,
            "ticket_id": 6,
            "score": "offered",
            "created_at": "2019-04-24T08:33:41Z",
            "updated_at": "2019-04-24T08:33:41Z",
            "comment": null,
            "reason": "No reason provided",
            "reason_id": 360001983174
        }
    ],
    "next_page": null,
    "previous_page": null,
    "count": 1
}</con:responseContent>
      </con:response>
    </con:restMockAction>
    <con:restMockAction name="/api/v2/satisfaction_ratings/.json" method="GET" resourcePath="/api/v2/satisfaction_ratings/.json" id="599edc06-ff50-48c3-b6d1-cdbb030e7095">
      <con:settings/>
      <con:dispatchStyle>SEQUENCE</con:dispatchStyle>
      <con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/</con:dispatchPath>
      <con:response name="Response 1" id="35dcfdce-0a94-4d3b-8d77-b25091363494" httpResponseStatus="200">
        <con:settings/>
        <con:responseContent/>
      </con:response>
    </con:restMockAction>
    <con:restMockAction name="/api/v2/tickets.json" method="GET" resourcePath="/api/v2/tickets.json" id="c818426d-16d5-4e89-92ac-15822190f5e7">
      <con:settings/>
      <con:dispatchStyle>SEQUENCE</con:dispatchStyle>
      <con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/</con:dispatchPath>
      <con:response name="Response 1" id="16197def-68e9-4a57-8651-d58675b3f10b" httpResponseStatus="200">
        <con:settings/>
        <con:responseContent/>
      </con:response>
    </con:restMockAction>
    <con:restMockAction name="/api/v2/tickets/.json" method="GET" resourcePath="/api/v2/tickets/.json" id="87ed3ffa-b01a-41c7-bd3b-4a5d6f21f8b6">
      <con:settings/>
      <con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
      <con:dispatchStyle>SEQUENCE</con:dispatchStyle>
      <con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/</con:dispatchPath>
      <con:response name="Response 1" id="a8de697f-6d8d-415a-bb09-5b0fc58aa521" httpResponseStatus="200" mediaType="application/json">
        <con:settings/>
        <con:responseContent>{
    "tickets": [
        {
            "url": "https://appdirect1help.zendesk.com/api/v2/tickets/1.json",
            "id": 1,
            "external_id": null,
            "via": {
                "channel": "sample_ticket",
                "source": {
                    "from": {},
                    "to": {},
                    "rel": null
                }
            },
            "created_at": "2019-04-23T06:18:28Z",
            "updated_at": "2019-04-28T06:01:08Z",
            "type": "incident",
            "subject": "Sample ticket: Meet the ticket",
            "raw_subject": "Sample ticket: Meet the ticket",
            "description": "Hi Ankit,\n\nThis is your first ticket. Ta-da! Any customer request sent to your supported channels (email, chat, voicemail, web form, and tweet) will become a Support ticket, just like this one. Respond to this ticket by typing a message above and clicking Submit. You can also see how an email becomes a ticket by emailing your new account, support@appdirect1help.zendesk.com. Your ticket will appear in ticket views.\n\nThat's the ticket on tickets. If you want to learn more, check out: \nhttps://support.zendesk.com/hc/en-us/articles/203691476\n",
            "priority": "normal",
            "status": "closed",
            "recipient": null,
            "requester_id": 378518915713,
            "submitter_id": 378488750673,
            "assignee_id": 378488750673,
            "organization_id": 364745425773,
            "group_id": 360003899233,
            "collaborator_ids": [],
            "follower_ids": [],
            "email_cc_ids": [],
            "forum_topic_id": null,
            "problem_id": null,
            "has_incidents": false,
            "is_public": true,
            "due_at": null,
            "tags": [
                "sample",
                "support",
                "zendesk"
            ],
            "custom_fields": [],
            "satisfaction_rating": {
                "score": "unoffered"
            },
            "sharing_agreement_ids": [],
            "fields": [],
            "followup_ids": [],
            "brand_id": 360002378333,
            "allow_channelback": false,
            "allow_attachments": true
        },
        {
            "url": "https://appdirect1help.zendesk.com/api/v2/tickets/2.json",
            "id": 2,
            "external_id": null,
            "via": {
                "channel": "web",
                "source": {
                    "from": {},
                    "to": {},
                    "rel": null
                }
            },
            "created_at": "2019-04-23T09:38:00Z",
            "updated_at": "2019-04-23T09:38:00Z",
            "type": null,
            "subject": "demo",
            "raw_subject": "demo",
            "description": "Hi Ankit",
            "priority": null,
            "status": "open",
            "recipient": null,
            "requester_id": 378488750673,
            "submitter_id": 378488750673,
            "assignee_id": 378488750673,
            "organization_id": 364640944433,
            "group_id": 360003899233,
            "collaborator_ids": [],
            "follower_ids": [],
            "email_cc_ids": [],
            "forum_topic_id": null,
            "problem_id": null,
            "has_incidents": false,
            "is_public": false,
            "due_at": null,
            "tags": [],
            "custom_fields": [],
            "satisfaction_rating": {
                "score": "unoffered"
            },
            "sharing_agreement_ids": [],
            "fields": [],
            "followup_ids": [],
            "brand_id": 360002378333,
            "allow_channelback": false,
            "allow_attachments": true
        },
        {
            "url": "https://appdirect1help.zendesk.com/api/v2/tickets/3.json",
            "id": 3,
            "external_id": null,
            "via": {
                "channel": "web",
                "source": {
                    "from": {},
                    "to": {},
                    "rel": null
                }
            },
            "created_at": "2019-04-23T11:51:33Z",
            "updated_at": "2019-04-23T12:06:29Z",
            "type": null,
            "subject": "demo 3",
            "raw_subject": "demo 3",
            "description": "demo 3",
            "priority": null,
            "status": "open",
            "recipient": null,
            "requester_id": 378488750673,
            "submitter_id": 378488750673,
            "assignee_id": 378488750673,
            "organization_id": 364640944433,
            "group_id": 360003899233,
            "collaborator_ids": [],
            "follower_ids": [],
            "email_cc_ids": [],
            "forum_topic_id": null,
            "problem_id": null,
            "has_incidents": false,
            "is_public": true,
            "due_at": null,
            "tags": [],
            "custom_fields": [],
            "satisfaction_rating": {
                "score": "unoffered"
            },
            "sharing_agreement_ids": [],
            "fields": [],
            "followup_ids": [],
            "brand_id": 360002378333,
            "allow_channelback": false,
            "allow_attachments": true
        },
        {
            "url": "https://appdirect1help.zendesk.com/api/v2/tickets/4.json",
            "id": 4,
            "external_id": null,
            "via": {
                "channel": "web",
                "source": {
                    "from": {},
                    "to": {},
                    "rel": null
                }
            },
            "created_at": "2019-04-23T12:07:30Z",
            "updated_at": "2019-04-28T06:01:08Z",
            "type": null,
            "subject": "demo 3",
            "raw_subject": "demo 3",
            "description": "dummy issue",
            "priority": null,
            "status": "closed",
            "recipient": null,
            "requester_id": 378518915713,
            "submitter_id": 378488750673,
            "assignee_id": 378488750673,
            "organization_id": 364745425773,
            "group_id": 360003899233,
            "collaborator_ids": [],
            "follower_ids": [],
            "email_cc_ids": [],
            "forum_topic_id": null,
            "problem_id": null,
            "has_incidents": false,
            "is_public": true,
            "due_at": null,
            "tags": [],
            "custom_fields": [],
            "satisfaction_rating": {
                "score": "unoffered"
            },
            "sharing_agreement_ids": [],
            "fields": [],
            "followup_ids": [],
            "brand_id": 360002378333,
            "allow_channelback": false,
            "allow_attachments": true
        },
        {
            "url": "https://appdirect1help.zendesk.com/api/v2/tickets/5.json",
            "id": 5,
            "external_id": null,
            "via": {
                "channel": "web",
                "source": {
                    "from": {},
                    "to": {},
                    "rel": null
                }
            },
            "created_at": "2019-04-24T06:18:03Z",
            "updated_at": "2019-04-28T07:04:03Z",
            "type": null,
            "subject": "new dummy issue",
            "raw_subject": "new dummy issue",
            "description": "dummy issue",
            "priority": null,
            "status": "closed",
            "recipient": null,
            "requester_id": 378488750673,
            "submitter_id": 378488750673,
            "assignee_id": 378488750673,
            "organization_id": 364640944433,
            "group_id": 360003899233,
            "collaborator_ids": [],
            "follower_ids": [],
            "email_cc_ids": [],
            "forum_topic_id": null,
            "problem_id": null,
            "has_incidents": false,
            "is_public": true,
            "due_at": null,
            "tags": [],
            "custom_fields": [],
            "satisfaction_rating": {
                "score": "unoffered"
            },
            "sharing_agreement_ids": [],
            "fields": [],
            "followup_ids": [],
            "brand_id": 360002378333,
            "allow_channelback": false,
            "allow_attachments": true
        },
        {
            "url": "https://appdirect1help.zendesk.com/api/v2/tickets/6.json",
            "id": 6,
            "external_id": null,
            "via": {
                "channel": "web",
                "source": {
                    "from": {},
                    "to": {},
                    "rel": null
                }
            },
            "created_at": "2019-04-24T08:32:57Z",
            "updated_at": "2019-04-28T09:01:19Z",
            "type": null,
            "subject": "new fresh dummy issue",
            "raw_subject": "new fresh dummy issue",
            "description": "dummy",
            "priority": null,
            "status": "closed",
            "recipient": null,
            "requester_id": 378599917954,
            "submitter_id": 378488750673,
            "assignee_id": 378488750673,
            "organization_id": 364640944433,
            "group_id": 360003899233,
            "collaborator_ids": [],
            "follower_ids": [],
            "email_cc_ids": [],
            "forum_topic_id": null,
            "problem_id": null,
            "has_incidents": false,
            "is_public": true,
            "due_at": null,
            "tags": [],
            "custom_fields": [],
            "satisfaction_rating": {
                "score": "offered"
            },
            "sharing_agreement_ids": [],
            "fields": [],
            "followup_ids": [],
            "brand_id": 360002378333,
            "allow_channelback": false,
            "allow_attachments": true
        }
    ],
    "next_page": null,
    "previous_page": null,
    "count": 6
}</con:responseContent>
      </con:response>
    </con:restMockAction>
  </con:restMockService>
  <con:properties/>
  <con:wssContainer/>
  <con:oAuth2ProfileContainer/>
  <con:oAuth1ProfileContainer/>
  <con:sensitiveInformation/>
</con:soapui-project>